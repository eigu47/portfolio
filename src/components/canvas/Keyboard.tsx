/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import { useRef } from "react";

import { Float, QuadraticBezierLine, useGLTF } from "@react-three/drei";
import { type Object3DNode, useFrame } from "@react-three/fiber";
import { Vector3, type Group, type Mesh } from "three";
import type { GLTF, Line2 } from "three-stdlib";

import { useDebug } from "~/components/canvas/Debugs";
import { useBlock } from "~/utils/useBlock";
import useGetMousePos from "~/utils/useGetMousePos";

type GLTFResult = GLTF & {
  nodes: {
    Keyboard_cable: THREE.Mesh;
    Case: THREE.Mesh;
    Keycaps: THREE.Mesh;
  };
  materials: {
    ["Black rubber"]: THREE.MeshStandardMaterial;
    ["Keycap material"]: THREE.MeshStandardMaterial;
  };
};

type Line2Props = Object3DNode<Line2, typeof Line2> & {
  setPoints: (
    start: Vector3 | [number, number, number],
    end: Vector3 | [number, number, number],
    mid: Vector3 | [number, number, number]
  ) => void;
};

const lookTo = new Vector3();
const lerpTo = new Vector3();
let isFinalPos = false;

export default function Model({ ...props }: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF("/keyboard.gltf") as GLTFResult;
  const keyboardRef = useRef<Group>(null);
  const cableMesh = useRef<Mesh>(null);
  const cableRef = useRef<Line2Props>(null);
  const { width, height, mobile } = useBlock();
  const { posX, posY } = useGetMousePos();
  const { ...debug } = useDebug();

  const keyboardPos = new Vector3(
    mobile ? 0 : width * 0.15,
    mobile ? -height * 0.2 : -height * 0.2,
    -0.5
  );

  const cableStart = new Vector3(-width * 0.5, -height, 0);
  const cableEnd = new Vector3(-width * 0.5, -height * 1.5, -height);
  const cableMid = new Vector3(-width * 0.5, -height * 1.5, -height);
  const cableLerp = new Vector3(width * 0.5, height * 0.3, -5);

  useFrame((_, delta) => {
    if (!keyboardRef.current || !cableRef.current || !cableMesh.current)
      return null;

    keyboardRef.current.lookAt(
      lookTo.lerp(lerpTo.set(posX, -posY - 2.5, 3.5), delta * 4)
    );

    if (!isFinalPos) {
      keyboardRef.current.position.lerp(keyboardPos, delta * 2);
      if (keyboardRef.current.position.distanceTo(keyboardPos) < 0.01)
        isFinalPos = true;
    }

    cableMesh.current.getWorldPosition(cableStart);
    cableMid.lerp(lerpTo, delta * 1);

    cableRef.current.setPoints(cableStart, cableEnd, cableMid);
  });

  return (
    <>
      <Float>
        <group
          ref={keyboardRef}
          position={[0, -height * 1.5, 2]}
          rotation={[Math.PI * 0.3, 0, 0]}
          scale={mobile ? width * 0.18 : 1}
          dispose={null}
          {...debug}
          {...props}
        >
          <mesh
            geometry={nodes.Case.geometry}
            material={materials["Black rubber"]}
          />
          <mesh
            ref={cableMesh}
            position={[0.7, 0.25, 0.55]}
            // geometry={nodes.Keyboard_cable.geometry}
            // material={materials["Black rubber"]}
          />
          <mesh
            geometry={nodes.Keycaps.geometry}
            material={materials["Keycap material"]}
            material-color="#cbd5e1"
          />
        </group>
      </Float>

      <QuadraticBezierLine
        ref={cableRef}
        start={cableStart}
        end={cableEnd}
        lineWidth={3}
      />
    </>
  );
}

useGLTF.preload("/keyboard.gltf");

/* <ContactShadows position={[0, -1.5, 0]} far={5} blur={5} /> */
