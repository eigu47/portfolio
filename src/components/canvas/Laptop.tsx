/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Laptop by Poly by Google [CC-BY] (https://creativecommons.org/licenses/by/3.0/) via Poly Pizza (https://poly.pizza/m/fEYeMIiRNHM)
*/

import { useRef } from "react";

import { Plane, useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { Vector3 } from "three";
import { type GLTF } from "three-stdlib";

import { useDebug } from "~/components/canvas/Debug";
import { PAGES } from "~/utils/store";
import useScrollPos from "~/utils/useScrollPos";
import useViewport from "~/utils/useViewport";

const CONTACT_PAGE = PAGES.findIndex(({ id }) => id === "contact");
const rotation = new Vector3();
const openRot = new Vector3();
const closedRot = new Vector3(Math.PI * 0.56, 0, 0);

export default function Model(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF("/laptop.glb") as GLTFResult;
  const { height, mobile } = useViewport();
  const { scrollPage } = useScrollPos();
  const monitorRef = useRef<THREE.Group>(null);

  useFrame((_, delta) => {
    monitorRef.current?.rotation.setFromVector3(
      rotation.lerp(
        scrollPage === CONTACT_PAGE ? openRot : closedRot,
        delta * 4
      )
    );
  });

  const debug = useDebug();

  return (
    <group
      {...props}
      scale={mobile ? 0.15 : 0.2}
      position={[0, -height * 0.15, 0]}
      rotation={[0.3, 0, 0]}
      dispose={null}
    >
      <mesh
        castShadow
        receiveShadow
        geometry={nodes["Laptop_01_Cube025-Mesh"].geometry}
        material={materials["1A1A1A"]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes["Laptop_01_Cube025-Mesh_1"].geometry}
        material={materials["455A64"]}
      />
      <group
        position={[0, 0.19, -4.85]}
        ref={monitorRef}
        rotation={closedRot.toArray()}
        {...debug}
      >
        <Plane
          position={[0, 4.92, -1.08]}
          rotation={[-0.18, 0, 0]}
          scale={[12.56, 8.41, 1]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes["Laptop_01_Cube025-Mesh001"].geometry}
          material={materials["1A1A1A"]}
        />
      </group>
    </group>
  );
}

useGLTF.preload("/laptop.glb");

type GLTFResult = GLTF & {
  nodes: {
    ["Laptop_01_Cube025-Mesh"]: THREE.Mesh;
    ["Laptop_01_Cube025-Mesh_1"]: THREE.Mesh;
    ["Laptop_01_Cube025-Mesh001"]: THREE.Mesh;
    ["Laptop_01_Cube025-Mesh001_1"]: THREE.Mesh;
    ["Laptop_01_Cube025-Mesh001_2"]: THREE.Mesh;
    ["Laptop_01_Cube025-Mesh001_3"]: THREE.Mesh;
  };
  materials: {
    ["1A1A1A"]: THREE.MeshStandardMaterial;
    ["455A64"]: THREE.MeshStandardMaterial;
    ["039BE5"]: THREE.MeshStandardMaterial;
    F44336: THREE.MeshStandardMaterial;
    FF9800: THREE.MeshStandardMaterial;
  };
};
